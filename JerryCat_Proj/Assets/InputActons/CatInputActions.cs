//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActons/CatInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CatInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CatInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CatInputActions"",
    ""maps"": [
        {
            ""name"": ""PetCat"",
            ""id"": ""94e0abe2-65bf-4f87-bf52-a329ecb2c788"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""9bcc9984-1d01-495c-bbaa-32ecaf43d619"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickPosition"",
                    ""type"": ""Value"",
                    ""id"": ""462dcef4-a71e-44fa-80a9-25a34dfaaa19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0abe920-5240-407a-9afe-58b8669ac9eb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4856587d-4859-4147-a872-cf33d601a762"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7816c6ee-0850-4e5d-a9f7-6a36c11dc24b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c92c245-071c-4105-a1ac-d9861a952592"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PetCat
        m_PetCat = asset.FindActionMap("PetCat", throwIfNotFound: true);
        m_PetCat_Click = m_PetCat.FindAction("Click", throwIfNotFound: true);
        m_PetCat_ClickPosition = m_PetCat.FindAction("ClickPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PetCat
    private readonly InputActionMap m_PetCat;
    private IPetCatActions m_PetCatActionsCallbackInterface;
    private readonly InputAction m_PetCat_Click;
    private readonly InputAction m_PetCat_ClickPosition;
    public struct PetCatActions
    {
        private @CatInputActions m_Wrapper;
        public PetCatActions(@CatInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_PetCat_Click;
        public InputAction @ClickPosition => m_Wrapper.m_PetCat_ClickPosition;
        public InputActionMap Get() { return m_Wrapper.m_PetCat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PetCatActions set) { return set.Get(); }
        public void SetCallbacks(IPetCatActions instance)
        {
            if (m_Wrapper.m_PetCatActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClick;
                @ClickPosition.started -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClickPosition;
                @ClickPosition.performed -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClickPosition;
                @ClickPosition.canceled -= m_Wrapper.m_PetCatActionsCallbackInterface.OnClickPosition;
            }
            m_Wrapper.m_PetCatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ClickPosition.started += instance.OnClickPosition;
                @ClickPosition.performed += instance.OnClickPosition;
                @ClickPosition.canceled += instance.OnClickPosition;
            }
        }
    }
    public PetCatActions @PetCat => new PetCatActions(this);
    public interface IPetCatActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnClickPosition(InputAction.CallbackContext context);
    }
}
